(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[1],{

/***/ "./node_modules/color-harmony/lib/color-harmony.js":
/*!*********************************************************!*\
  !*** ./node_modules/color-harmony/lib/color-harmony.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * color-harmony\n * https://github.com/skratchdot/color-harmony\n *\n * Copyright (c) 2014 skratchdot\n * Licensed under the MIT license.\n */\n\n\n\nvar onecolor = __webpack_require__(/*! onecolor */ \"./node_modules/onecolor/one-color-all-debug.js\");\n\nvar Harmonizer = function () {\n\tvar api = this;\n\n\t/* degree arrays taken from: https://github.com/brehaut/color-js/ */\n\tvar harmonies = {\n\t\tcomplementary: [0,180],\n\t\tsplitComplementary: [0,150,320],\n\t\tsplitComplementaryCW: [0,150,300],\n\t\tsplitComplementaryCCW: [0,60,210],\n\t\ttriadic: [0,120,240],\n\t\tclash: [0,90,270],\n\t\ttetradic: [0,90,180,270],\n\t\tfourToneCW: [0,60,180,240],\n\t\tfourToneCCW: [0,120,180,300],\n\t\tfiveToneA: [0,115,155,205,245],\n\t\tfiveToneB: [0,40,90,130,245],\n\t\tfiveToneC: [0,50,90,205,320],\n\t\tfiveToneD: [0,40,155,270,310],\n\t\tfiveToneE: [0,115,230,270,320],\n\t\tsixToneCW: [0,30,120,150,240,270],\n\t\tsixToneCCW: [0,90,120,210,240,330],\n\t\tneutral: [0,15,30,45,60,75],\n\t\tanalogous: [0,30,60,90,120,150]\n\t};\n\n\tvar parseColor = function (colorString) {\n\t\tvar color = onecolor(colorString);\n\t\tif (!color) {\n\t\t\tcolor = onecolor('#000000');\n\t\t}\n\t\treturn color;\n\t};\n\t\n\tvar harmonize = function (color, degrees) {\n\t\tvar ret = [], hsl, h, s, l, a, i, degree;\n\t\thsl = color.hsl();\n\t\th = hsl._hue;\n\t\ts = hsl._saturation;\n\t\tl = hsl._lightness;\n\t\ta = hsl._alpha;\n\t\tfor (i = 0; i < degrees.length; i++) {\n\t\t\tdegree = degrees[i];\n\t\t\tif (isFinite(degree) && typeof degree === 'number') {\n\t\t\t\tret.push(new onecolor.HSL((h + (1 / 360 * degree)) % 1, s, l, a).hex());\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\tvar scaleTo = function (color, size, scale) {\n\t\tvar i, ret = [], r, g, b, a, scaleR, scaleG, scaleB;\n\t\tif (!isFinite(size) || typeof size !== 'number') {\n\t\t\tsize = 10;\n\t\t}\n\t\tr = color.red();\n\t\tg = color.green();\n\t\tb = color.blue();\n\t\ta = color.alpha();\n\t\tscaleR = (scale - r) / size;\n\t\tscaleG = (scale - g) / size;\n\t\tscaleB = (scale - b) / size;\n\t\tfor (i = 0; i < size; i++) {\n\t\t\tret.push(new onecolor.RGB(r, g, b, a).hex());\n\t\t\tr += scaleR;\n\t\t\tg += scaleG;\n\t\t\tb += scaleB;\n\t\t}\n\t\treturn ret;\n\t};\n\n\tapi.add = function (harmonyName, degreeArray) {\n\t\tif (Array.isArray(degreeArray)) {\n\t\t\tharmonies[harmonyName] = degreeArray;\n\t\t}\n\t};\n\n\tapi.harmonizeAll = function (colorString) {\n\t\tvar ret = {};\n\t\tvar color = parseColor(colorString);\n\t\tfor (var harmonyName in harmonies) {\n\t\t\tif (harmonies.hasOwnProperty(harmonyName)) {\n\t\t\t\tret[harmonyName] = harmonize(color, harmonies[harmonyName]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\tapi.harmonize = function (colorString, harmony) {\n\t\tvar color = parseColor(colorString);\n\t\tif (harmonies.hasOwnProperty(harmony)) {\n\t\t\tharmony = harmonies[harmony];\n\t\t}\n\t\tif (Array.isArray(harmony)) {\n\t\t\treturn harmonize(color, harmony);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t};\n\n\t// mix with black (#000000)\n\tapi.shades = function (colorString, size) {\n\t\treturn scaleTo(parseColor(colorString), size, 0);\n\t};\n\n\t// mix with white (#ffffff)\n\tapi.tints = function (colorString, size) {\n\t\treturn scaleTo(parseColor(colorString), size, 1);\n\t};\n\n\t// mix with middle gray (#777777)\n\tapi.tones = function (colorString, size) {\n\t\treturn scaleTo(parseColor(colorString), size, 0.5);\n\t};\n\n\treturn api;\n};\n\nexports.Harmonizer = function () {\n\treturn new Harmonizer();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbG9yLWhhcm1vbnkvbGliL2NvbG9yLWhhcm1vbnkuanM/Y2NkMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsZ0VBQVU7O0FBRWpDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvQkFBb0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2NvbG9yLWhhcm1vbnkvbGliL2NvbG9yLWhhcm1vbnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogY29sb3ItaGFybW9ueVxuICogaHR0cHM6Ly9naXRodWIuY29tL3NrcmF0Y2hkb3QvY29sb3ItaGFybW9ueVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBza3JhdGNoZG90XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgb25lY29sb3IgPSByZXF1aXJlKCdvbmVjb2xvcicpO1xuXG52YXIgSGFybW9uaXplciA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIGFwaSA9IHRoaXM7XG5cblx0LyogZGVncmVlIGFycmF5cyB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vYnJlaGF1dC9jb2xvci1qcy8gKi9cblx0dmFyIGhhcm1vbmllcyA9IHtcblx0XHRjb21wbGVtZW50YXJ5OiBbMCwxODBdLFxuXHRcdHNwbGl0Q29tcGxlbWVudGFyeTogWzAsMTUwLDMyMF0sXG5cdFx0c3BsaXRDb21wbGVtZW50YXJ5Q1c6IFswLDE1MCwzMDBdLFxuXHRcdHNwbGl0Q29tcGxlbWVudGFyeUNDVzogWzAsNjAsMjEwXSxcblx0XHR0cmlhZGljOiBbMCwxMjAsMjQwXSxcblx0XHRjbGFzaDogWzAsOTAsMjcwXSxcblx0XHR0ZXRyYWRpYzogWzAsOTAsMTgwLDI3MF0sXG5cdFx0Zm91clRvbmVDVzogWzAsNjAsMTgwLDI0MF0sXG5cdFx0Zm91clRvbmVDQ1c6IFswLDEyMCwxODAsMzAwXSxcblx0XHRmaXZlVG9uZUE6IFswLDExNSwxNTUsMjA1LDI0NV0sXG5cdFx0Zml2ZVRvbmVCOiBbMCw0MCw5MCwxMzAsMjQ1XSxcblx0XHRmaXZlVG9uZUM6IFswLDUwLDkwLDIwNSwzMjBdLFxuXHRcdGZpdmVUb25lRDogWzAsNDAsMTU1LDI3MCwzMTBdLFxuXHRcdGZpdmVUb25lRTogWzAsMTE1LDIzMCwyNzAsMzIwXSxcblx0XHRzaXhUb25lQ1c6IFswLDMwLDEyMCwxNTAsMjQwLDI3MF0sXG5cdFx0c2l4VG9uZUNDVzogWzAsOTAsMTIwLDIxMCwyNDAsMzMwXSxcblx0XHRuZXV0cmFsOiBbMCwxNSwzMCw0NSw2MCw3NV0sXG5cdFx0YW5hbG9nb3VzOiBbMCwzMCw2MCw5MCwxMjAsMTUwXVxuXHR9O1xuXG5cdHZhciBwYXJzZUNvbG9yID0gZnVuY3Rpb24gKGNvbG9yU3RyaW5nKSB7XG5cdFx0dmFyIGNvbG9yID0gb25lY29sb3IoY29sb3JTdHJpbmcpO1xuXHRcdGlmICghY29sb3IpIHtcblx0XHRcdGNvbG9yID0gb25lY29sb3IoJyMwMDAwMDAnKTtcblx0XHR9XG5cdFx0cmV0dXJuIGNvbG9yO1xuXHR9O1xuXHRcblx0dmFyIGhhcm1vbml6ZSA9IGZ1bmN0aW9uIChjb2xvciwgZGVncmVlcykge1xuXHRcdHZhciByZXQgPSBbXSwgaHNsLCBoLCBzLCBsLCBhLCBpLCBkZWdyZWU7XG5cdFx0aHNsID0gY29sb3IuaHNsKCk7XG5cdFx0aCA9IGhzbC5faHVlO1xuXHRcdHMgPSBoc2wuX3NhdHVyYXRpb247XG5cdFx0bCA9IGhzbC5fbGlnaHRuZXNzO1xuXHRcdGEgPSBoc2wuX2FscGhhO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBkZWdyZWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRkZWdyZWUgPSBkZWdyZWVzW2ldO1xuXHRcdFx0aWYgKGlzRmluaXRlKGRlZ3JlZSkgJiYgdHlwZW9mIGRlZ3JlZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0cmV0LnB1c2gobmV3IG9uZWNvbG9yLkhTTCgoaCArICgxIC8gMzYwICogZGVncmVlKSkgJSAxLCBzLCBsLCBhKS5oZXgoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG5cblx0dmFyIHNjYWxlVG8gPSBmdW5jdGlvbiAoY29sb3IsIHNpemUsIHNjYWxlKSB7XG5cdFx0dmFyIGksIHJldCA9IFtdLCByLCBnLCBiLCBhLCBzY2FsZVIsIHNjYWxlRywgc2NhbGVCO1xuXHRcdGlmICghaXNGaW5pdGUoc2l6ZSkgfHwgdHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG5cdFx0XHRzaXplID0gMTA7XG5cdFx0fVxuXHRcdHIgPSBjb2xvci5yZWQoKTtcblx0XHRnID0gY29sb3IuZ3JlZW4oKTtcblx0XHRiID0gY29sb3IuYmx1ZSgpO1xuXHRcdGEgPSBjb2xvci5hbHBoYSgpO1xuXHRcdHNjYWxlUiA9IChzY2FsZSAtIHIpIC8gc2l6ZTtcblx0XHRzY2FsZUcgPSAoc2NhbGUgLSBnKSAvIHNpemU7XG5cdFx0c2NhbGVCID0gKHNjYWxlIC0gYikgLyBzaXplO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcblx0XHRcdHJldC5wdXNoKG5ldyBvbmVjb2xvci5SR0IociwgZywgYiwgYSkuaGV4KCkpO1xuXHRcdFx0ciArPSBzY2FsZVI7XG5cdFx0XHRnICs9IHNjYWxlRztcblx0XHRcdGIgKz0gc2NhbGVCO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xuXG5cdGFwaS5hZGQgPSBmdW5jdGlvbiAoaGFybW9ueU5hbWUsIGRlZ3JlZUFycmF5KSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZGVncmVlQXJyYXkpKSB7XG5cdFx0XHRoYXJtb25pZXNbaGFybW9ueU5hbWVdID0gZGVncmVlQXJyYXk7XG5cdFx0fVxuXHR9O1xuXG5cdGFwaS5oYXJtb25pemVBbGwgPSBmdW5jdGlvbiAoY29sb3JTdHJpbmcpIHtcblx0XHR2YXIgcmV0ID0ge307XG5cdFx0dmFyIGNvbG9yID0gcGFyc2VDb2xvcihjb2xvclN0cmluZyk7XG5cdFx0Zm9yICh2YXIgaGFybW9ueU5hbWUgaW4gaGFybW9uaWVzKSB7XG5cdFx0XHRpZiAoaGFybW9uaWVzLmhhc093blByb3BlcnR5KGhhcm1vbnlOYW1lKSkge1xuXHRcdFx0XHRyZXRbaGFybW9ueU5hbWVdID0gaGFybW9uaXplKGNvbG9yLCBoYXJtb25pZXNbaGFybW9ueU5hbWVdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcblxuXHRhcGkuaGFybW9uaXplID0gZnVuY3Rpb24gKGNvbG9yU3RyaW5nLCBoYXJtb255KSB7XG5cdFx0dmFyIGNvbG9yID0gcGFyc2VDb2xvcihjb2xvclN0cmluZyk7XG5cdFx0aWYgKGhhcm1vbmllcy5oYXNPd25Qcm9wZXJ0eShoYXJtb255KSkge1xuXHRcdFx0aGFybW9ueSA9IGhhcm1vbmllc1toYXJtb255XTtcblx0XHR9XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoaGFybW9ueSkpIHtcblx0XHRcdHJldHVybiBoYXJtb25pemUoY29sb3IsIGhhcm1vbnkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHR9O1xuXG5cdC8vIG1peCB3aXRoIGJsYWNrICgjMDAwMDAwKVxuXHRhcGkuc2hhZGVzID0gZnVuY3Rpb24gKGNvbG9yU3RyaW5nLCBzaXplKSB7XG5cdFx0cmV0dXJuIHNjYWxlVG8ocGFyc2VDb2xvcihjb2xvclN0cmluZyksIHNpemUsIDApO1xuXHR9O1xuXG5cdC8vIG1peCB3aXRoIHdoaXRlICgjZmZmZmZmKVxuXHRhcGkudGludHMgPSBmdW5jdGlvbiAoY29sb3JTdHJpbmcsIHNpemUpIHtcblx0XHRyZXR1cm4gc2NhbGVUbyhwYXJzZUNvbG9yKGNvbG9yU3RyaW5nKSwgc2l6ZSwgMSk7XG5cdH07XG5cblx0Ly8gbWl4IHdpdGggbWlkZGxlIGdyYXkgKCM3Nzc3NzcpXG5cdGFwaS50b25lcyA9IGZ1bmN0aW9uIChjb2xvclN0cmluZywgc2l6ZSkge1xuXHRcdHJldHVybiBzY2FsZVRvKHBhcnNlQ29sb3IoY29sb3JTdHJpbmcpLCBzaXplLCAwLjUpO1xuXHR9O1xuXG5cdHJldHVybiBhcGk7XG59O1xuXG5leHBvcnRzLkhhcm1vbml6ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBuZXcgSGFybW9uaXplcigpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/color-harmony/lib/color-harmony.js\n");

/***/ }),

/***/ "./node_modules/onecolor/one-color-all-debug.js":
/*!******************************************************!*\
  !*** ./node_modules/onecolor/one-color-all-debug.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*jshint evil:true, onevar:false*/\n/*global define*/\nvar installedColorSpaces = [],\n    namedColors = {},\n    undef = function (obj) {\n        return typeof obj === 'undefined';\n    },\n    channelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)(%)?\\s*/,\n    percentageChannelRegExp = /\\s*(\\.\\d+|100|\\d?\\d(?:\\.\\d+)?)%\\s*/,\n    alphaChannelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)\\s*/,\n    cssColorRegExp = new RegExp(\n                         \"^(rgb|hsl|hsv)a?\" +\n                         \"\\\\(\" +\n                             channelRegExp.source + \",\" +\n                             channelRegExp.source + \",\" +\n                             channelRegExp.source +\n                             \"(?:,\" + alphaChannelRegExp.source + \")?\" +\n                         \"\\\\)$\", \"i\");\n\nfunction ONECOLOR(obj) {\n    if (Object.prototype.toString.apply(obj) === '[object Array]') {\n        if (typeof obj[0] === 'string' && typeof ONECOLOR[obj[0]] === 'function') {\n            // Assumed array from .toJSON()\n            return new ONECOLOR[obj[0]](obj.slice(1, obj.length));\n        } else if (obj.length === 4) {\n            // Assumed 4 element int RGB array from canvas with all channels [0;255]\n            return new ONECOLOR.RGB(obj[0] / 255, obj[1] / 255, obj[2] / 255, obj[3] / 255);\n        }\n    } else if (typeof obj === 'string') {\n        var lowerCased = obj.toLowerCase();\n        if (namedColors[lowerCased]) {\n            obj = '#' + namedColors[lowerCased];\n        }\n        if (lowerCased === 'transparent') {\n            obj = 'rgba(0,0,0,0)';\n        }\n        // Test for CSS rgb(....) string\n        var matchCssSyntax = obj.match(cssColorRegExp);\n        if (matchCssSyntax) {\n            var colorSpaceName = matchCssSyntax[1].toUpperCase(),\n                alpha = undef(matchCssSyntax[8]) ? matchCssSyntax[8] : parseFloat(matchCssSyntax[8]),\n                hasHue = colorSpaceName[0] === 'H',\n                firstChannelDivisor = matchCssSyntax[3] ? 100 : (hasHue ? 360 : 255),\n                secondChannelDivisor = (matchCssSyntax[5] || hasHue) ? 100 : 255,\n                thirdChannelDivisor = (matchCssSyntax[7] || hasHue) ? 100 : 255;\n            if (undef(ONECOLOR[colorSpaceName])) {\n                throw new Error(\"one.color.\" + colorSpaceName + \" is not installed.\");\n            }\n            return new ONECOLOR[colorSpaceName](\n                parseFloat(matchCssSyntax[2]) / firstChannelDivisor,\n                parseFloat(matchCssSyntax[4]) / secondChannelDivisor,\n                parseFloat(matchCssSyntax[6]) / thirdChannelDivisor,\n                alpha\n            );\n        }\n        // Assume hex syntax\n        if (obj.length < 6) {\n            // Allow CSS shorthand\n            obj = obj.replace(/^#?([0-9a-f])([0-9a-f])([0-9a-f])$/i, '$1$1$2$2$3$3');\n        }\n        // Split obj into red, green, and blue components\n        var hexMatch = obj.match(/^#?([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])$/i);\n        if (hexMatch) {\n            return new ONECOLOR.RGB(\n                parseInt(hexMatch[1], 16) / 255,\n                parseInt(hexMatch[2], 16) / 255,\n                parseInt(hexMatch[3], 16) / 255\n            );\n        }\n\n        // No match so far. Lets try the less likely ones\n        if (ONECOLOR.CMYK) {\n            var cmykMatch = obj.match(new RegExp(\n                             \"^cmyk\" +\n                             \"\\\\(\" +\n                                 percentageChannelRegExp.source + \",\" +\n                                 percentageChannelRegExp.source + \",\" +\n                                 percentageChannelRegExp.source + \",\" +\n                                 percentageChannelRegExp.source +\n                             \"\\\\)$\", \"i\"));\n            if (cmykMatch) {\n                return new ONECOLOR.CMYK(\n                    parseFloat(cmykMatch[1]) / 100,\n                    parseFloat(cmykMatch[2]) / 100,\n                    parseFloat(cmykMatch[3]) / 100,\n                    parseFloat(cmykMatch[4]) / 100\n                );\n            }\n        }\n    } else if (typeof obj === 'object' && obj.isColor) {\n        return obj;\n    }\n    return false;\n}\n\nfunction installColorSpace(colorSpaceName, propertyNames, config) {\n    ONECOLOR[colorSpaceName] = new Function(propertyNames.join(\",\"),\n        // Allow passing an array to the constructor:\n        \"if (Object.prototype.toString.apply(\" + propertyNames[0] + \") === '[object Array]') {\" +\n            propertyNames.map(function (propertyName, i) {\n                return propertyName + \"=\" + propertyNames[0] + \"[\" + i + \"];\";\n            }).reverse().join(\"\") +\n        \"}\" +\n        \"if (\" + propertyNames.filter(function (propertyName) {\n            return propertyName !== 'alpha';\n        }).map(function (propertyName) {\n            return \"isNaN(\" + propertyName + \")\";\n        }).join(\"||\") + \"){\" + \"throw new Error(\\\"[\" + colorSpaceName + \"]: Invalid color: (\\\"+\" + propertyNames.join(\"+\\\",\\\"+\") + \"+\\\")\\\");}\" +\n        propertyNames.map(function (propertyName) {\n            if (propertyName === 'hue') {\n                return \"this._hue=hue<0?hue-Math.floor(hue):hue%1\"; // Wrap\n            } else if (propertyName === 'alpha') {\n                return \"this._alpha=(isNaN(alpha)||alpha>1)?1:(alpha<0?0:alpha);\";\n            } else {\n                return \"this._\" + propertyName + \"=\" + propertyName + \"<0?0:(\" + propertyName + \">1?1:\" + propertyName + \")\";\n            }\n        }).join(\";\") + \";\"\n    );\n    ONECOLOR[colorSpaceName].propertyNames = propertyNames;\n\n    var prototype = ONECOLOR[colorSpaceName].prototype;\n\n    ['valueOf', 'hex', 'hexa', 'css', 'cssa'].forEach(function (methodName) {\n        prototype[methodName] = prototype[methodName] || (colorSpaceName === 'RGB' ? prototype.hex : new Function(\"return this.rgb().\" + methodName + \"();\"));\n    });\n\n    prototype.isColor = true;\n\n    prototype.equals = function (otherColor, epsilon) {\n        if (undef(epsilon)) {\n            epsilon = 1e-10;\n        }\n\n        otherColor = otherColor[colorSpaceName.toLowerCase()]();\n\n        for (var i = 0; i < propertyNames.length; i = i + 1) {\n            if (Math.abs(this['_' + propertyNames[i]] - otherColor['_' + propertyNames[i]]) > epsilon) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    prototype.toJSON = new Function(\n        \"return ['\" + colorSpaceName + \"', \" +\n            propertyNames.map(function (propertyName) {\n                return \"this._\" + propertyName;\n            }, this).join(\", \") +\n        \"];\"\n    );\n\n    for (var propertyName in config) {\n        if (config.hasOwnProperty(propertyName)) {\n            var matchFromColorSpace = propertyName.match(/^from(.*)$/);\n            if (matchFromColorSpace) {\n                ONECOLOR[matchFromColorSpace[1].toUpperCase()].prototype[colorSpaceName.toLowerCase()] = config[propertyName];\n            } else {\n                prototype[propertyName] = config[propertyName];\n            }\n        }\n    }\n\n    // It is pretty easy to implement the conversion to the same color space:\n    prototype[colorSpaceName.toLowerCase()] = function () {\n        return this;\n    };\n    prototype.toString = new Function(\"return \\\"[one.color.\" + colorSpaceName + \":\\\"+\" + propertyNames.map(function (propertyName, i) {\n        return \"\\\" \" + propertyNames[i] + \"=\\\"+this._\" + propertyName;\n    }).join(\"+\") + \"+\\\"]\\\";\");\n\n    // Generate getters and setters\n    propertyNames.forEach(function (propertyName, i) {\n        prototype[propertyName] = prototype[propertyName === 'black' ? 'k' : propertyName[0]] = new Function(\"value\", \"isDelta\",\n            // Simple getter mode: color.red()\n            \"if (typeof value === 'undefined') {\" +\n                \"return this._\" + propertyName + \";\" +\n            \"}\" +\n            // Adjuster: color.red(+.2, true)\n            \"if (isDelta) {\" +\n                \"return new this.constructor(\" + propertyNames.map(function (otherPropertyName, i) {\n                    return \"this._\" + otherPropertyName + (propertyName === otherPropertyName ? \"+value\" : \"\");\n                }).join(\", \") + \");\" +\n            \"}\" +\n            // Setter: color.red(.2);\n            \"return new this.constructor(\" + propertyNames.map(function (otherPropertyName, i) {\n                return propertyName === otherPropertyName ? \"value\" : \"this._\" + otherPropertyName;\n            }).join(\", \") + \");\");\n    });\n\n    function installForeignMethods(targetColorSpaceName, sourceColorSpaceName) {\n        var obj = {};\n        obj[sourceColorSpaceName.toLowerCase()] = new Function(\"return this.rgb().\" + sourceColorSpaceName.toLowerCase() + \"();\"); // Fallback\n        ONECOLOR[sourceColorSpaceName].propertyNames.forEach(function (propertyName, i) {\n            obj[propertyName] = obj[propertyName === 'black' ? 'k' : propertyName[0]] = new Function(\"value\", \"isDelta\", \"return this.\" + sourceColorSpaceName.toLowerCase() + \"().\" + propertyName + \"(value, isDelta);\");\n        });\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop) && ONECOLOR[targetColorSpaceName].prototype[prop] === undefined) {\n                ONECOLOR[targetColorSpaceName].prototype[prop] = obj[prop];\n            }\n        }\n    }\n\n    installedColorSpaces.forEach(function (otherColorSpaceName) {\n        installForeignMethods(colorSpaceName, otherColorSpaceName);\n        installForeignMethods(otherColorSpaceName, colorSpaceName);\n    });\n\n    installedColorSpaces.push(colorSpaceName);\n}\n\nONECOLOR.installMethod = function (name, fn) {\n    installedColorSpaces.forEach(function (colorSpace) {\n        ONECOLOR[colorSpace].prototype[name] = fn;\n    });\n};\n\ninstallColorSpace('RGB', ['red', 'green', 'blue', 'alpha'], {\n    hex: function () {\n        var hexString = (Math.round(255 * this._red) * 0x10000 + Math.round(255 * this._green) * 0x100 + Math.round(255 * this._blue)).toString(16);\n        return '#' + ('00000'.substr(0, 6 - hexString.length)) + hexString;\n    },\n\n    hexa: function () {\n        var alphaString = Math.round(this._alpha * 255).toString(16);\n        return '#' + '00'.substr(0, 2 - alphaString.length) + alphaString + this.hex().substr(1, 6);\n    },\n\n    css: function () {\n        return \"rgb(\" + Math.round(255 * this._red) + \",\" + Math.round(255 * this._green) + \",\" + Math.round(255 * this._blue) + \")\";\n    },\n\n    cssa: function () {\n        return \"rgba(\" + Math.round(255 * this._red) + \",\" + Math.round(255 * this._green) + \",\" + Math.round(255 * this._blue) + \",\" + this._alpha + \")\";\n    }\n});\nif ( true && !undef(__webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\"))) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return ONECOLOR;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (true) {\n    // Node module export\n    module.exports = ONECOLOR;\n} else {}\n\nif (typeof jQuery !== 'undefined' && undef(jQuery.color)) {\n    jQuery.color = ONECOLOR;\n}\n\n/*global namedColors*/\nnamedColors = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '0ff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000',\n    blanchedalmond: 'ffebcd',\n    blue: '00f',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '0ff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgrey: 'a9a9a9',\n    darkgreen: '006400',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkslategrey: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dimgrey: '696969',\n    dodgerblue: '1e90ff',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'f0f',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    grey: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgray: 'd3d3d3',\n    lightgrey: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslategray: '789',\n    lightslategrey: '789',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '0f0',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'f0f',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370d8',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'd87093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    rebeccapurple: '639',\n    red: 'f00',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    slategrey: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    wheat: 'f5deb3',\n    white: 'fff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ff0',\n    yellowgreen: '9acd32'\n};\n\n/*global INCLUDE, installColorSpace, ONECOLOR*/\n\ninstallColorSpace('XYZ', ['x', 'y', 'z', 'alpha'], {\n    fromRgb: function () {\n        // http://www.easyrgb.com/index.php?X=MATH&H=02#text2\n        var convert = function (channel) {\n                return channel > 0.04045 ?\n                    Math.pow((channel + 0.055) / 1.055, 2.4) :\n                    channel / 12.92;\n            },\n            r = convert(this._red),\n            g = convert(this._green),\n            b = convert(this._blue);\n\n        // Reference white point sRGB D65:\n        // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n        return new ONECOLOR.XYZ(\n            r * 0.4124564 + g * 0.3575761 + b * 0.1804375,\n            r * 0.2126729 + g * 0.7151522 + b * 0.0721750,\n            r * 0.0193339 + g * 0.1191920 + b * 0.9503041,\n            this._alpha\n        );\n    },\n\n    rgb: function () {\n        // http://www.easyrgb.com/index.php?X=MATH&H=01#text1\n        var x = this._x,\n            y = this._y,\n            z = this._z,\n            convert = function (channel) {\n                return channel > 0.0031308 ?\n                    1.055 * Math.pow(channel, 1 / 2.4) - 0.055 :\n                    12.92 * channel;\n            };\n\n        // Reference white point sRGB D65:\n        // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n        return new ONECOLOR.RGB(\n            convert(x *  3.2404542 + y * -1.5371385 + z * -0.4985314),\n            convert(x * -0.9692660 + y *  1.8760108 + z *  0.0415560),\n            convert(x *  0.0556434 + y * -0.2040259 + z *  1.0572252),\n            this._alpha\n        );\n    },\n\n    lab: function () {\n        // http://www.easyrgb.com/index.php?X=MATH&H=07#text7\n        var convert = function (channel) {\n                return channel > 0.008856 ?\n                    Math.pow(channel, 1 / 3) :\n                    7.787037 * channel + 4 / 29;\n            },\n            x = convert(this._x /  95.047),\n            y = convert(this._y / 100.000),\n            z = convert(this._z / 108.883);\n\n        return new ONECOLOR.LAB(\n            (116 * y) - 16,\n            500 * (x - y),\n            200 * (y - z),\n            this._alpha\n        );\n    }\n});\n\n/*global INCLUDE, installColorSpace, ONECOLOR*/\n\ninstallColorSpace('LAB', ['l', 'a', 'b', 'alpha'], {\n    fromRgb: function () {\n        return this.xyz().lab();\n    },\n\n    rgb: function () {\n        return this.xyz().rgb();\n    },\n\n    xyz: function () {\n        // http://www.easyrgb.com/index.php?X=MATH&H=08#text8\n        var convert = function (channel) {\n                var pow = Math.pow(channel, 3);\n                return pow > 0.008856 ?\n                    pow :\n                    (channel - 16 / 116) / 7.87;\n            },\n            y = (this._l + 16) / 116,\n            x = this._a / 500 + y,\n            z = y - this._b / 200;\n\n        return new ONECOLOR.XYZ(\n            convert(x) *  95.047,\n            convert(y) * 100.000,\n            convert(z) * 108.883,\n            this._alpha\n        );\n    }\n});\n\n/*global one*/\n\ninstallColorSpace('HSV', ['hue', 'saturation', 'value', 'alpha'], {\n    rgb: function () {\n        var hue = this._hue,\n            saturation = this._saturation,\n            value = this._value,\n            i = Math.min(5, Math.floor(hue * 6)),\n            f = hue * 6 - i,\n            p = value * (1 - saturation),\n            q = value * (1 - f * saturation),\n            t = value * (1 - (1 - f) * saturation),\n            red,\n            green,\n            blue;\n        switch (i) {\n        case 0:\n            red = value;\n            green = t;\n            blue = p;\n            break;\n        case 1:\n            red = q;\n            green = value;\n            blue = p;\n            break;\n        case 2:\n            red = p;\n            green = value;\n            blue = t;\n            break;\n        case 3:\n            red = p;\n            green = q;\n            blue = value;\n            break;\n        case 4:\n            red = t;\n            green = p;\n            blue = value;\n            break;\n        case 5:\n            red = value;\n            green = p;\n            blue = q;\n            break;\n        }\n        return new ONECOLOR.RGB(red, green, blue, this._alpha);\n    },\n\n    hsl: function () {\n        var l = (2 - this._saturation) * this._value,\n            sv = this._saturation * this._value,\n            svDivisor = l <= 1 ? l : (2 - l),\n            saturation;\n\n        // Avoid division by zero when lightness approaches zero:\n        if (svDivisor < 1e-9) {\n            saturation = 0;\n        } else {\n            saturation = sv / svDivisor;\n        }\n        return new ONECOLOR.HSL(this._hue, saturation, l / 2, this._alpha);\n    },\n\n    fromRgb: function () { // Becomes one.color.RGB.prototype.hsv\n        var red = this._red,\n            green = this._green,\n            blue = this._blue,\n            max = Math.max(red, green, blue),\n            min = Math.min(red, green, blue),\n            delta = max - min,\n            hue,\n            saturation = (max === 0) ? 0 : (delta / max),\n            value = max;\n        if (delta === 0) {\n            hue = 0;\n        } else {\n            switch (max) {\n            case red:\n                hue = (green - blue) / delta / 6 + (green < blue ? 1 : 0);\n                break;\n            case green:\n                hue = (blue - red) / delta / 6 + 1 / 3;\n                break;\n            case blue:\n                hue = (red - green) / delta / 6 + 2 / 3;\n                break;\n            }\n        }\n        return new ONECOLOR.HSV(hue, saturation, value, this._alpha);\n    }\n});\n\n/*global one*/\n\n\ninstallColorSpace('HSL', ['hue', 'saturation', 'lightness', 'alpha'], {\n    hsv: function () {\n        // Algorithm adapted from http://wiki.secondlife.com/wiki/Color_conversion_scripts\n        var l = this._lightness * 2,\n            s = this._saturation * ((l <= 1) ? l : 2 - l),\n            saturation;\n\n        // Avoid division by zero when l + s is very small (approaching black):\n        if (l + s < 1e-9) {\n            saturation = 0;\n        } else {\n            saturation = (2 * s) / (l + s);\n        }\n\n        return new ONECOLOR.HSV(this._hue, saturation, (l + s) / 2, this._alpha);\n    },\n\n    rgb: function () {\n        return this.hsv().rgb();\n    },\n\n    fromRgb: function () { // Becomes one.color.RGB.prototype.hsv\n        return this.hsv().hsl();\n    }\n});\n\n/*global one*/\n\ninstallColorSpace('CMYK', ['cyan', 'magenta', 'yellow', 'black', 'alpha'], {\n    rgb: function () {\n        return new ONECOLOR.RGB((1 - this._cyan * (1 - this._black) - this._black),\n                                 (1 - this._magenta * (1 - this._black) - this._black),\n                                 (1 - this._yellow * (1 - this._black) - this._black),\n                                 this._alpha);\n    },\n\n    fromRgb: function () { // Becomes one.color.RGB.prototype.cmyk\n        // Adapted from http://www.javascripter.net/faq/rgb2cmyk.htm\n        var red = this._red,\n            green = this._green,\n            blue = this._blue,\n            cyan = 1 - red,\n            magenta = 1 - green,\n            yellow = 1 - blue,\n            black = 1;\n        if (red || green || blue) {\n            black = Math.min(cyan, Math.min(magenta, yellow));\n            cyan = (cyan - black) / (1 - black);\n            magenta = (magenta - black) / (1 - black);\n            yellow = (yellow - black) / (1 - black);\n        } else {\n            black = 1;\n        }\n        return new ONECOLOR.CMYK(cyan, magenta, yellow, black, this._alpha);\n    }\n});\n\nONECOLOR.installMethod('clearer', function (amount) {\n    return this.alpha(isNaN(amount) ? -0.1 : -amount, true);\n});\n\n\nONECOLOR.installMethod('darken', function (amount) {\n    return this.lightness(isNaN(amount) ? -0.1 : -amount, true);\n});\n\n\nONECOLOR.installMethod('desaturate', function (amount) {\n    return this.saturation(isNaN(amount) ? -0.1 : -amount, true);\n});\n\nfunction gs () {\n    var rgb = this.rgb(),\n        val = rgb._red * 0.3 + rgb._green * 0.59 + rgb._blue * 0.11;\n\n    return new ONECOLOR.RGB(val, val, val, this._alpha);\n};\n\nONECOLOR.installMethod('greyscale', gs);\nONECOLOR.installMethod('grayscale', gs);\n\n\nONECOLOR.installMethod('lighten', function (amount) {\n    return this.lightness(isNaN(amount) ? 0.1 : amount, true);\n});\n\nONECOLOR.installMethod('mix', function (otherColor, weight) {\n    otherColor = ONECOLOR(otherColor).rgb();\n    weight = 1 - (isNaN(weight) ? 0.5 : weight);\n\n    var w = weight * 2 - 1,\n        a = this._alpha - otherColor._alpha,\n        weight1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2,\n        weight2 = 1 - weight1,\n        rgb = this.rgb();\n\n    return new ONECOLOR.RGB(\n        rgb._red * weight1 + otherColor._red * weight2,\n        rgb._green * weight1 + otherColor._green * weight2,\n        rgb._blue * weight1 + otherColor._blue * weight2,\n        rgb._alpha * weight + otherColor._alpha * (1 - weight)\n    );\n});\n\nONECOLOR.installMethod('negate', function () {\n    var rgb = this.rgb();\n    return new ONECOLOR.RGB(1 - rgb._red, 1 - rgb._green, 1 - rgb._blue, this._alpha);\n});\n\nONECOLOR.installMethod('opaquer', function (amount) {\n    return this.alpha(isNaN(amount) ? 0.1 : amount, true);\n});\n\nONECOLOR.installMethod('rotate', function (degrees) {\n    return this.hue((degrees || 0) / 360, true);\n});\n\n\nONECOLOR.installMethod('saturate', function (amount) {\n    return this.saturation(isNaN(amount) ? 0.1 : amount, true);\n});\n\n// Adapted from http://gimp.sourcearchive.com/documentation/2.6.6-1ubuntu1/color-to-alpha_8c-source.html\n/*\n    toAlpha returns a color where the values of the argument have been converted to alpha\n*/\nONECOLOR.installMethod('toAlpha', function (color) {\n    var me = this.rgb(),\n        other = ONECOLOR(color).rgb(),\n        epsilon = 1e-10,\n        a = new ONECOLOR.RGB(0, 0, 0, me._alpha),\n        channels = ['_red', '_green', '_blue'];\n\n    channels.forEach(function (channel) {\n        if (me[channel] < epsilon) {\n            a[channel] = me[channel];\n        } else if (me[channel] > other[channel]) {\n            a[channel] = (me[channel] - other[channel]) / (1 - other[channel]);\n        } else if (me[channel] > other[channel]) {\n            a[channel] = (other[channel] - me[channel]) / other[channel];\n        } else {\n            a[channel] = 0;\n        }\n    });\n\n    if (a._red > a._green) {\n        if (a._red > a._blue) {\n            me._alpha = a._red;\n        } else {\n            me._alpha = a._blue;\n        }\n    } else if (a._green > a._blue) {\n        me._alpha = a._green;\n    } else {\n        me._alpha = a._blue;\n    }\n\n    if (me._alpha < epsilon) {\n        return me;\n    }\n\n    channels.forEach(function (channel) {\n        me[channel] = (me[channel] - other[channel]) / me._alpha + other[channel];\n    });\n    me._alpha *= a._alpha;\n\n    return me;\n});\n\n/*global one*/\n\n// This file is purely for the build system\n\n// Order is important to prevent channel name clashes. Lab <-> hsL\n\n// Convenience functions\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/onecolor/one-color-all-debug.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzPzAwODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\n");

/***/ })

}]);